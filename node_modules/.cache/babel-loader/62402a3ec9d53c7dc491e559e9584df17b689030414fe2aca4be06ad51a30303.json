{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82108\\\\Desktop\\\\taveband\\\\taveband\\\\src\\\\routes\\\\Scrap.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from '../components/Header';\r\nimport './Scrap.css';\r\n\r\nfunction Scrap() {\r\n  const { user_id } = useParams();\r\n  const [scrapPosts, setScrapPosts] = useState([]);\r\n  const [scrapPerformances, setScrapPerformances] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchScrapPosts = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/posts`);\r\n        setScrapPosts(response.data.scrap_post);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap posts:', error);\r\n      }\r\n    };\r\n\r\n    const fetchScrapPerformances = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/myperformances`);\r\n        setScrapPerformances(response.data.scrap_performance);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap performances:', error);\r\n      }\r\n    };\r\n\r\n    fetchScrapPosts();\r\n    fetchScrapPerformances();\r\n  }, [user_id]);\r\n\r\n  const handleDeletePost = async (postId) => {\r\n    try {\r\n      await axios.delete(`/dailband/posts/${postId}`);\r\n      setScrapPosts(scrapPosts.filter(({ post }) => post.post_id !== postId));\r\n    } catch (error) {\r\n      console.error('Error deleting post:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePerformance = async (performanceId) => {\r\n    try {\r\n      await axios.delete(`/dailband/performances/${performanceId}`);\r\n      setScrapPerformances(scrapPerformances.filter(({ performance }) => performance.performance_id !== performanceId));\r\n    } catch (error) {\r\n      console.error('Error deleting performance:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Scrap\">\r\n      <Header />\r\n      <div className=\"Scrap-container\">\r\n        <div className=\"Sidebar\">\r\n          <div className=\"Profile-picture\">\r\n            <img src=\"/path/to/default-profile.png\" alt=\"프로필 사진\" />\r\n          </div>\r\n          <h2>윤영선</h2>\r\n          <Link to={`/profile/edit/${user_id}`}>프로필 수정</Link>\r\n          <Link to={`/scrap/${user_id}`} className=\"active\">스크랩</Link>\r\n          <Link to={`/myposts/${user_id}`}>내가 쓴 글</Link>\r\n          <Link to={`/reservations/${user_id}`}>공연 예약</Link>\r\n        </div>\r\n        <div className=\"Content\">\r\n          <h2>공연 홍보 게시글</h2>\r\n          <div className=\"ScrapPerformances\">\r\n            {scrapPerformances.length > 0 ? (\r\n              scrapPerformances.map(({ performance }) => (\r\n                <div key={performance.performance_id} className=\"PerformanceCard\">\r\n                  <img src={performance.image_path} alt={performance.title} className=\"PerformanceImage\" />\r\n                  <div className=\"PerformanceInfo\">\r\n                    <h3>{performance.title}</h3>\r\n                    <p>{performance.content}</p>\r\n                    <small>{performance.date} {performance.time}</small>\r\n                    <p>{performance.venue}</p>\r\n                    <button onClick={() => handleDeletePerformance(performance.performance_id)}>삭제</button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>스크랩한 공연이 없습니다.</p>\r\n            )}\r\n          </div>\r\n\r\n          <h2>게시글</h2>\r\n          <div className=\"ScrapPosts\">\r\n            {scrapPosts.length > 0 ? (\r\n              scrapPosts.map(({ post }) => (\r\n                <div key={post.post_id} className=\"PostCard\">\r\n                  <div className=\"PostInfo\">\r\n                    <h3>{post.title}</h3>\r\n                    <p>{post.content}</p>\r\n                    <small>작성날짜: {new Date(post.created_at).toLocaleDateString()}</small>\r\n                    <button onClick={() => handleDeletePost(post.post_id)}>삭제</button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>스크랩한 게시글이 없습니다.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scrap;\r\n\r\n*/\n\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Header from '../components/Header';\r\nimport './Scrap.css';\r\n\r\nfunction Scrap() {\r\n  const { user_id } = useParams();\r\n  const [scrapPosts, setScrapPosts] = useState([]);\r\n  const [scrapPerformances, setScrapPerformances] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchScrapPosts = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/posts`);\r\n        setScrapPosts(response.data.scrap_post);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap posts:', error);\r\n      }\r\n    };\r\n\r\n    const fetchScrapPerformances = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/myperformances`);\r\n        setScrapPerformances(response.data.scrap_performance);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap performances:', error);\r\n      }\r\n    };\r\n\r\n    fetchScrapPosts();\r\n    fetchScrapPerformances();\r\n  }, [user_id]);\r\n\r\n  const handleDeleteScrapPost = async (postId) => {\r\n    try {\r\n      await axios.delete(`/dailband/user/${user_id}/scraps/posts/${postId}`);\r\n      setScrapPosts(scrapPosts.filter(scrap => scrap.post.post_id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete scrap post:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteScrapPerformance = async (performanceId) => {\r\n    try {\r\n      await axios.delete(`/dailband/user/${user_id}/scraps/myperformances/${performanceId}`);\r\n      setScrapPerformances(scrapPerformances.filter(scrap => scrap.performance.performance_id !== performanceId));\r\n    } catch (error) {\r\n      console.error('Failed to delete scrap performance:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Scrap\">\r\n      <Header />\r\n      <div className=\"Scrap-container\">\r\n        <div className=\"Sidebar\">\r\n          <div className=\"Profile-picture\">\r\n            <img src=\"/path/to/default-profile.png\" alt=\"프로필 사진\" />\r\n          </div>\r\n          <h2>사용자 닉네임</h2>\r\n          <Link to={`/profile/edit/${user_id}`}>프로필 수정</Link>\r\n          <Link to={`/scrap/${user_id}`} className=\"active\">스크랩</Link>\r\n          <Link to={`/myposts/${user_id}`}>내가 쓴 글</Link>\r\n          <Link to={`/myperformances/${user_id}`}>내가 작성한 공연 조회</Link>\r\n          <Link to={`/reservations/${user_id}`}>공연 예약</Link>\r\n        </div>\r\n        <div className=\"Content\">\r\n          <h2>스크랩</h2>\r\n          <h3>스크랩한 게시글</h3>\r\n          {scrapPosts.length === 0 ? (\r\n            <p>스크랩한 게시글이 없습니다.</p>\r\n          ) : (\r\n            <ul>\r\n              {scrapPosts.map((scrap) => (\r\n                <li key={scrap.post.post_id}>\r\n                  <Link to={`/post/${scrap.post.post_id}`}>{scrap.post.title}</Link>\r\n                  <button onClick={() => handleDeleteScrapPost(scrap.post.post_id)}>삭제</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n          <h3>스크랩한 공연</h3>\r\n          {scrapPerformances.length === 0 ? (\r\n            <p>스크랩한 공연이 없습니다.</p>\r\n          ) : (\r\n            <ul>\r\n              {scrapPerformances.map((scrap) => (\r\n                <li key={scrap.performance.performance_id}>\r\n                  <Link to={`/performance/${scrap.performance.performance_id}`}>{scrap.performance.title}</Link>\r\n                  <button onClick={() => handleDeleteScrapPerformance(scrap.performance.performance_id)}>삭제</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scrap;\r\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, useParams } from 'react-router-dom';\nimport Header from '../components/Header';\nimport './Scrap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Scrap() {\n  _s();\n  const {\n    user_id\n  } = useParams();\n  const [scrapPosts, setScrapPosts] = useState([]);\n  const [scrapPerformances, setScrapPerformances] = useState([]);\n  useEffect(() => {\n    const fetchScrapPosts = async () => {\n      try {\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/posts`);\n        console.log('Scrap posts response:', response.data);\n        setScrapPosts(response.data.scrap_post);\n      } catch (error) {\n        console.error('Failed to fetch scrap posts:', error);\n      }\n    };\n    const fetchScrapPerformances = async () => {\n      try {\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/myperformances`);\n        console.log('Scrap performances response:', response.data);\n        setScrapPerformances(response.data.scrap_performance);\n      } catch (error) {\n        console.error('Failed to fetch scrap performances:', error);\n      }\n    };\n    fetchScrapPosts();\n    fetchScrapPerformances();\n  }, [user_id]);\n  const handleDeleteScrapPost = async postId => {\n    try {\n      await axios.delete(`/dailband/user/${user_id}/scraps/posts/${postId}`);\n      setScrapPosts(scrapPosts.filter(scrap => scrap.post.post_id !== postId));\n    } catch (error) {\n      console.error('Failed to delete scrap post:', error);\n    }\n  };\n  const handleDeleteScrapPerformance = async performanceId => {\n    try {\n      await axios.delete(`/dailband/user/${user_id}/scraps/myperformances/${performanceId}`);\n      setScrapPerformances(scrapPerformances.filter(scrap => scrap.performance.performance_id !== performanceId));\n    } catch (error) {\n      console.error('Failed to delete scrap performance:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Scrap\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Scrap-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Profile-picture\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/path/to/default-profile.png\",\n            alt: \"\\uD504\\uB85C\\uD544 \\uC0AC\\uC9C4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC0AC\\uC6A9\\uC790 \\uB2C9\\uB124\\uC784\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/profile/edit/${user_id}`,\n          children: \"\\uD504\\uB85C\\uD544 \\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/scrap/${user_id}`,\n          className: \"active\",\n          children: \"\\uC2A4\\uD06C\\uB7A9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/myposts/${user_id}`,\n          children: \"\\uB0B4\\uAC00 \\uC4F4 \\uAE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/myperformances/${user_id}`,\n          children: \"\\uB0B4\\uAC00 \\uC791\\uC131\\uD55C \\uACF5\\uC5F0 \\uC870\\uD68C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/reservations/${user_id}`,\n          children: \"\\uACF5\\uC5F0 \\uC608\\uC57D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC2A4\\uD06C\\uB7A9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uC2A4\\uD06C\\uB7A9\\uD55C \\uAC8C\\uC2DC\\uAE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), scrapPosts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uC2A4\\uD06C\\uB7A9\\uD55C \\uAC8C\\uC2DC\\uAE00\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: scrapPosts.map(scrap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: `/post/${scrap.post.post_id}`,\n              children: scrap.post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteScrapPost(scrap.post.post_id),\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 19\n            }, this)]\n          }, scrap.post.post_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uC2A4\\uD06C\\uB7A9\\uD55C \\uACF5\\uC5F0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), scrapPerformances.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uC2A4\\uD06C\\uB7A9\\uD55C \\uACF5\\uC5F0\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: scrapPerformances.map(scrap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: `/performance/${scrap.performance.performance_id}`,\n              children: scrap.performance.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteScrapPerformance(scrap.performance.performance_id),\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 19\n            }, this)]\n          }, scrap.performance.performance_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(Scrap, \"264IMx4pWap0bO6P5wKowm8f2WY=\", false, function () {\n  return [useParams];\n});\n_c = Scrap;\nexport default Scrap;\nvar _c;\n$RefreshReg$(_c, \"Scrap\");","map":{"version":3,"names":["React","useState","useEffect","axios","Link","useParams","Header","jsxDEV","_jsxDEV","Scrap","_s","user_id","scrapPosts","setScrapPosts","scrapPerformances","setScrapPerformances","fetchScrapPosts","response","get","console","log","data","scrap_post","error","fetchScrapPerformances","scrap_performance","handleDeleteScrapPost","postId","delete","filter","scrap","post","post_id","handleDeleteScrapPerformance","performanceId","performance","performance_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","to","length","map","title","onClick","_c","$RefreshReg$"],"sources":["C:/Users/82108/Desktop/taveband/taveband/src/routes/Scrap.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from '../components/Header';\r\nimport './Scrap.css';\r\n\r\nfunction Scrap() {\r\n  const { user_id } = useParams();\r\n  const [scrapPosts, setScrapPosts] = useState([]);\r\n  const [scrapPerformances, setScrapPerformances] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchScrapPosts = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/posts`);\r\n        setScrapPosts(response.data.scrap_post);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap posts:', error);\r\n      }\r\n    };\r\n\r\n    const fetchScrapPerformances = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/myperformances`);\r\n        setScrapPerformances(response.data.scrap_performance);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap performances:', error);\r\n      }\r\n    };\r\n\r\n    fetchScrapPosts();\r\n    fetchScrapPerformances();\r\n  }, [user_id]);\r\n\r\n  const handleDeletePost = async (postId) => {\r\n    try {\r\n      await axios.delete(`/dailband/posts/${postId}`);\r\n      setScrapPosts(scrapPosts.filter(({ post }) => post.post_id !== postId));\r\n    } catch (error) {\r\n      console.error('Error deleting post:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePerformance = async (performanceId) => {\r\n    try {\r\n      await axios.delete(`/dailband/performances/${performanceId}`);\r\n      setScrapPerformances(scrapPerformances.filter(({ performance }) => performance.performance_id !== performanceId));\r\n    } catch (error) {\r\n      console.error('Error deleting performance:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Scrap\">\r\n      <Header />\r\n      <div className=\"Scrap-container\">\r\n        <div className=\"Sidebar\">\r\n          <div className=\"Profile-picture\">\r\n            <img src=\"/path/to/default-profile.png\" alt=\"프로필 사진\" />\r\n          </div>\r\n          <h2>윤영선</h2>\r\n          <Link to={`/profile/edit/${user_id}`}>프로필 수정</Link>\r\n          <Link to={`/scrap/${user_id}`} className=\"active\">스크랩</Link>\r\n          <Link to={`/myposts/${user_id}`}>내가 쓴 글</Link>\r\n          <Link to={`/reservations/${user_id}`}>공연 예약</Link>\r\n        </div>\r\n        <div className=\"Content\">\r\n          <h2>공연 홍보 게시글</h2>\r\n          <div className=\"ScrapPerformances\">\r\n            {scrapPerformances.length > 0 ? (\r\n              scrapPerformances.map(({ performance }) => (\r\n                <div key={performance.performance_id} className=\"PerformanceCard\">\r\n                  <img src={performance.image_path} alt={performance.title} className=\"PerformanceImage\" />\r\n                  <div className=\"PerformanceInfo\">\r\n                    <h3>{performance.title}</h3>\r\n                    <p>{performance.content}</p>\r\n                    <small>{performance.date} {performance.time}</small>\r\n                    <p>{performance.venue}</p>\r\n                    <button onClick={() => handleDeletePerformance(performance.performance_id)}>삭제</button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>스크랩한 공연이 없습니다.</p>\r\n            )}\r\n          </div>\r\n\r\n          <h2>게시글</h2>\r\n          <div className=\"ScrapPosts\">\r\n            {scrapPosts.length > 0 ? (\r\n              scrapPosts.map(({ post }) => (\r\n                <div key={post.post_id} className=\"PostCard\">\r\n                  <div className=\"PostInfo\">\r\n                    <h3>{post.title}</h3>\r\n                    <p>{post.content}</p>\r\n                    <small>작성날짜: {new Date(post.created_at).toLocaleDateString()}</small>\r\n                    <button onClick={() => handleDeletePost(post.post_id)}>삭제</button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>스크랩한 게시글이 없습니다.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scrap;\r\n\r\n*/\r\n\r\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Header from '../components/Header';\r\nimport './Scrap.css';\r\n\r\nfunction Scrap() {\r\n  const { user_id } = useParams();\r\n  const [scrapPosts, setScrapPosts] = useState([]);\r\n  const [scrapPerformances, setScrapPerformances] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchScrapPosts = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/posts`);\r\n        setScrapPosts(response.data.scrap_post);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap posts:', error);\r\n      }\r\n    };\r\n\r\n    const fetchScrapPerformances = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/myperformances`);\r\n        setScrapPerformances(response.data.scrap_performance);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap performances:', error);\r\n      }\r\n    };\r\n\r\n    fetchScrapPosts();\r\n    fetchScrapPerformances();\r\n  }, [user_id]);\r\n\r\n  const handleDeleteScrapPost = async (postId) => {\r\n    try {\r\n      await axios.delete(`/dailband/user/${user_id}/scraps/posts/${postId}`);\r\n      setScrapPosts(scrapPosts.filter(scrap => scrap.post.post_id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete scrap post:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteScrapPerformance = async (performanceId) => {\r\n    try {\r\n      await axios.delete(`/dailband/user/${user_id}/scraps/myperformances/${performanceId}`);\r\n      setScrapPerformances(scrapPerformances.filter(scrap => scrap.performance.performance_id !== performanceId));\r\n    } catch (error) {\r\n      console.error('Failed to delete scrap performance:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Scrap\">\r\n      <Header />\r\n      <div className=\"Scrap-container\">\r\n        <div className=\"Sidebar\">\r\n          <div className=\"Profile-picture\">\r\n            <img src=\"/path/to/default-profile.png\" alt=\"프로필 사진\" />\r\n          </div>\r\n          <h2>사용자 닉네임</h2>\r\n          <Link to={`/profile/edit/${user_id}`}>프로필 수정</Link>\r\n          <Link to={`/scrap/${user_id}`} className=\"active\">스크랩</Link>\r\n          <Link to={`/myposts/${user_id}`}>내가 쓴 글</Link>\r\n          <Link to={`/myperformances/${user_id}`}>내가 작성한 공연 조회</Link>\r\n          <Link to={`/reservations/${user_id}`}>공연 예약</Link>\r\n        </div>\r\n        <div className=\"Content\">\r\n          <h2>스크랩</h2>\r\n          <h3>스크랩한 게시글</h3>\r\n          {scrapPosts.length === 0 ? (\r\n            <p>스크랩한 게시글이 없습니다.</p>\r\n          ) : (\r\n            <ul>\r\n              {scrapPosts.map((scrap) => (\r\n                <li key={scrap.post.post_id}>\r\n                  <Link to={`/post/${scrap.post.post_id}`}>{scrap.post.title}</Link>\r\n                  <button onClick={() => handleDeleteScrapPost(scrap.post.post_id)}>삭제</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n          <h3>스크랩한 공연</h3>\r\n          {scrapPerformances.length === 0 ? (\r\n            <p>스크랩한 공연이 없습니다.</p>\r\n          ) : (\r\n            <ul>\r\n              {scrapPerformances.map((scrap) => (\r\n                <li key={scrap.performance.performance_id}>\r\n                  <Link to={`/performance/${scrap.performance.performance_id}`}>{scrap.performance.title}</Link>\r\n                  <button onClick={() => handleDeleteScrapPerformance(scrap.performance.performance_id)}>삭제</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scrap;\r\n*/\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Header from '../components/Header';\r\nimport './Scrap.css';\r\n\r\nfunction Scrap() {\r\n  const { user_id } = useParams();\r\n  const [scrapPosts, setScrapPosts] = useState([]);\r\n  const [scrapPerformances, setScrapPerformances] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchScrapPosts = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/posts`);\r\n        console.log('Scrap posts response:', response.data);\r\n        setScrapPosts(response.data.scrap_post);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap posts:', error);\r\n      }\r\n    };\r\n\r\n    const fetchScrapPerformances = async () => {\r\n      try {\r\n        const response = await axios.get(`/dailband/user/${user_id}/scraps/myperformances`);\r\n        console.log('Scrap performances response:', response.data);\r\n        setScrapPerformances(response.data.scrap_performance);\r\n      } catch (error) {\r\n        console.error('Failed to fetch scrap performances:', error);\r\n      }\r\n    };\r\n\r\n    fetchScrapPosts();\r\n    fetchScrapPerformances();\r\n  }, [user_id]);\r\n\r\n  const handleDeleteScrapPost = async (postId) => {\r\n    try {\r\n      await axios.delete(`/dailband/user/${user_id}/scraps/posts/${postId}`);\r\n      setScrapPosts(scrapPosts.filter(scrap => scrap.post.post_id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete scrap post:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteScrapPerformance = async (performanceId) => {\r\n    try {\r\n      await axios.delete(`/dailband/user/${user_id}/scraps/myperformances/${performanceId}`);\r\n      setScrapPerformances(scrapPerformances.filter(scrap => scrap.performance.performance_id !== performanceId));\r\n    } catch (error) {\r\n      console.error('Failed to delete scrap performance:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Scrap\">\r\n      <Header />\r\n      <div className=\"Scrap-container\">\r\n        <div className=\"Sidebar\">\r\n          <div className=\"Profile-picture\">\r\n            <img src=\"/path/to/default-profile.png\" alt=\"프로필 사진\" />\r\n          </div>\r\n          <h2>사용자 닉네임</h2>\r\n          <Link to={`/profile/edit/${user_id}`}>프로필 수정</Link>\r\n          <Link to={`/scrap/${user_id}`} className=\"active\">스크랩</Link>\r\n          <Link to={`/myposts/${user_id}`}>내가 쓴 글</Link>\r\n          <Link to={`/myperformances/${user_id}`}>내가 작성한 공연 조회</Link>\r\n          <Link to={`/reservations/${user_id}`}>공연 예약</Link>\r\n        </div>\r\n        <div className=\"Content\">\r\n          <h2>스크랩</h2>\r\n          <h3>스크랩한 게시글</h3>\r\n          {scrapPosts.length === 0 ? (\r\n            <p>스크랩한 게시글이 없습니다.</p>\r\n          ) : (\r\n            <ul>\r\n              {scrapPosts.map((scrap) => (\r\n                <li key={scrap.post.post_id}>\r\n                  <Link to={`/post/${scrap.post.post_id}`}>{scrap.post.title}</Link>\r\n                  <button onClick={() => handleDeleteScrapPost(scrap.post.post_id)}>삭제</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n          <h3>스크랩한 공연</h3>\r\n          {scrapPerformances.length === 0 ? (\r\n            <p>스크랩한 공연이 없습니다.</p>\r\n          ) : (\r\n            <ul>\r\n              {scrapPerformances.map((scrap) => (\r\n                <li key={scrap.performance.performance_id}>\r\n                  <Link to={`/performance/${scrap.performance.performance_id}`}>{scrap.performance.title}</Link>\r\n                  <button onClick={() => handleDeleteScrapPerformance(scrap.performance.performance_id)}>삭제</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scrap;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}